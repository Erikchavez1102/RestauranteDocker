
//--------------Prueba que falla con error ERROR: script returned exit code 127 Finished: FAILURE-----------------------

/*pipeline {
    agent any
    parameters {
        string(name: 'name_container', defaultValue: 'restaurantedocker-frontend-2', description: 'nombre del contenedor')
        string(name: 'name_imagen', defaultValue: 'restaurante-frontend', description: 'nombre de la imagen')
        string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen', defaultValue: '5000', description: 'puerto a publicar')
    }
    environment {
        name_final = "${name_container}${tag_imagen}${puerto_imagen}"
    }
    stages {
        stage('stop/rm'){
            when{
                expression{
                    DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"')
                    return DOCKER_EXIST != ''
                }
            }
            steps{
                script{
                    sh '''
                        docker stop ${name_final}
                    '''
                }
            }
        }
        stage('build'){
            steps{
                script{
                    sh '''
                        docker build . -t ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
        stage('run'){
            steps{
                script{
                    sh "docker run -dtp ${puerto_imagen}:80 --name ${name_container} ${name_imagen}:${tag_imagen}"
                }
            }
        }
    }
}*/


//---------------------------------------prueba hola mundo funcional---------------------------------------------------

/*import groovy.json.JsonSlurperClassic

def jsonParse(def json){
    new groovy.json.JsonSlurperClassic().parseText(json)
}
pipeline {
    agent any
    environment {
        appName = "variable"
    }
    stages{
        stage("paso 1"){
            steps{
                script{
                    sh "echo 'hola mundo'"
                }
            }
        }
    }
    post{
        always{
            deleteDir()
                sh "echo 'fase always'"
        }
        success{
            sh "echo 'fase success'"
        }
        failure{
            sh "echo 'fase failure'"
        }
    }
}*/

//---------------------------------------Prueba hola mundo funcional---------------------------------------------------

pipeline{
    agent any
    stages{
        stage("verify tooling"){
            steps{
                sh '''
                    docker version
                    docker info
                    docker compose version
                    curl --version
                    jq --version
                '''
            }
        }  
    }
}
